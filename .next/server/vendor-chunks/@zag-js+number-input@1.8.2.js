"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zag-js+number-input@1.8.2";
exports.ids = ["vendor-chunks/@zag-js+number-input@1.8.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@zag-js+number-input@1.8.2/node_modules/@zag-js/number-input/dist/index.mjs":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zag-js+number-input@1.8.2/node_modules/@zag-js/number-input/dist/index.mjs ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anatomy: () => (/* binding */ anatomy),\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   machine: () => (/* binding */ machine),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   splitProps: () => (/* binding */ splitProps)\n/* harmony export */ });\n/* harmony import */ var _zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/anatomy */ \"(ssr)/./node_modules/.pnpm/@zag-js+anatomy@1.8.2/node_modules/@zag-js/anatomy/dist/index.mjs\");\n/* harmony import */ var _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/dom-query */ \"(ssr)/./node_modules/.pnpm/@zag-js+dom-query@1.8.2/node_modules/@zag-js/dom-query/dist/index.mjs\");\n/* harmony import */ var _zag_js_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @zag-js/utils */ \"(ssr)/./node_modules/.pnpm/@zag-js+utils@1.8.2/node_modules/@zag-js/utils/dist/index.mjs\");\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/./node_modules/.pnpm/@zag-js+core@1.8.2/node_modules/@zag-js/core/dist/index.mjs\");\n/* harmony import */ var _internationalized_number__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @internationalized/number */ \"(ssr)/./node_modules/.pnpm/@internationalized+number@3.6.0/node_modules/@internationalized/number/dist/NumberParser.mjs\");\n/* harmony import */ var _zag_js_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @zag-js/types */ \"(ssr)/./node_modules/.pnpm/@zag-js+types@1.8.2/node_modules/@zag-js/types/dist/index.mjs\");\n\n\n\n\n\n\n\n// src/number-input.anatomy.ts\nvar anatomy = (0,_zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__.createAnatomy)(\"numberInput\").parts(\n  \"root\",\n  \"label\",\n  \"input\",\n  \"control\",\n  \"valueText\",\n  \"incrementTrigger\",\n  \"decrementTrigger\",\n  \"scrubber\"\n);\nvar parts = anatomy.build();\nvar getRootId = (ctx) => ctx.ids?.root ?? `number-input:${ctx.id}`;\nvar getInputId = (ctx) => ctx.ids?.input ?? `number-input:${ctx.id}:input`;\nvar getIncrementTriggerId = (ctx) => ctx.ids?.incrementTrigger ?? `number-input:${ctx.id}:inc`;\nvar getDecrementTriggerId = (ctx) => ctx.ids?.decrementTrigger ?? `number-input:${ctx.id}:dec`;\nvar getScrubberId = (ctx) => ctx.ids?.scrubber ?? `number-input:${ctx.id}:scrubber`;\nvar getCursorId = (ctx) => `number-input:${ctx.id}:cursor`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `number-input:${ctx.id}:label`;\nvar getInputEl = (ctx) => ctx.getById(getInputId(ctx));\nvar getIncrementTriggerEl = (ctx) => ctx.getById(getIncrementTriggerId(ctx));\nvar getDecrementTriggerEl = (ctx) => ctx.getById(getDecrementTriggerId(ctx));\nvar getCursorEl = (ctx) => ctx.getDoc().getElementById(getCursorId(ctx));\nvar getPressedTriggerEl = (ctx, hint) => {\n  let btnEl = null;\n  if (hint === \"increment\") {\n    btnEl = getIncrementTriggerEl(ctx);\n  }\n  if (hint === \"decrement\") {\n    btnEl = getDecrementTriggerEl(ctx);\n  }\n  return btnEl;\n};\nvar setupVirtualCursor = (ctx, point) => {\n  if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.isSafari)()) return;\n  createVirtualCursor(ctx, point);\n  return () => {\n    getCursorEl(ctx)?.remove();\n  };\n};\nvar preventTextSelection = (ctx) => {\n  const doc = ctx.getDoc();\n  const html = doc.documentElement;\n  const body = doc.body;\n  body.style.pointerEvents = \"none\";\n  html.style.userSelect = \"none\";\n  html.style.cursor = \"ew-resize\";\n  return () => {\n    body.style.pointerEvents = \"\";\n    html.style.userSelect = \"\";\n    html.style.cursor = \"\";\n    if (!html.style.length) {\n      html.removeAttribute(\"style\");\n    }\n    if (!body.style.length) {\n      body.removeAttribute(\"style\");\n    }\n  };\n};\nvar getMousemoveValue = (ctx, opts) => {\n  const { point, isRtl, event } = opts;\n  const win = ctx.getWin();\n  const x = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.roundToDpr)(event.movementX, win.devicePixelRatio);\n  const y = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.roundToDpr)(event.movementY, win.devicePixelRatio);\n  let hint = x > 0 ? \"increment\" : x < 0 ? \"decrement\" : null;\n  if (isRtl && hint === \"increment\") hint = \"decrement\";\n  if (isRtl && hint === \"decrement\") hint = \"increment\";\n  const newPoint = { x: point.x + x, y: point.y + y };\n  const width = win.innerWidth;\n  const half = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.roundToDpr)(7.5, win.devicePixelRatio);\n  newPoint.x = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.wrap)(newPoint.x + half, width) - half;\n  return { hint, point: newPoint };\n};\nvar createVirtualCursor = (ctx, point) => {\n  const doc = ctx.getDoc();\n  const el = doc.createElement(\"div\");\n  el.className = \"scrubber--cursor\";\n  el.id = getCursorId(ctx);\n  Object.assign(el.style, {\n    width: \"15px\",\n    height: \"15px\",\n    position: \"fixed\",\n    pointerEvents: \"none\",\n    left: \"0px\",\n    top: \"0px\",\n    zIndex: _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.MAX_Z_INDEX,\n    transform: point ? `translate3d(${point.x}px, ${point.y}px, 0px)` : void 0,\n    willChange: \"transform\"\n  });\n  el.innerHTML = `\n      <svg width=\"46\" height=\"15\" style=\"left: -15.5px; position: absolute; top: 0; filter: drop-shadow(rgba(0, 0, 0, 0.4) 0px 1px 1.1px);\">\n        <g transform=\"translate(2 3)\">\n          <path fill-rule=\"evenodd\" d=\"M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z\" style=\"stroke-width: 2px; stroke: white;\"></path>\n          <path fill-rule=\"evenodd\" d=\"M 15 4.5L 15 2L 11.5 5.5L 15 9L 15 6.5L 31 6.5L 31 9L 34.5 5.5L 31 2L 31 4.5Z\"></path>\n        </g>\n      </svg>`;\n  doc.body.appendChild(el);\n};\n\n// src/number-input.connect.ts\nfunction connect(service, normalize) {\n  const { state, send, prop, scope, computed } = service;\n  const focused = state.hasTag(\"focus\");\n  const disabled = computed(\"isDisabled\");\n  const readOnly = prop(\"readOnly\");\n  const empty = computed(\"isValueEmpty\");\n  const invalid = computed(\"isOutOfRange\") || !!prop(\"invalid\");\n  const isIncrementDisabled = disabled || !computed(\"canIncrement\") || readOnly;\n  const isDecrementDisabled = disabled || !computed(\"canDecrement\") || readOnly;\n  const translations = prop(\"translations\");\n  return {\n    focused,\n    invalid,\n    empty,\n    value: computed(\"formattedValue\"),\n    valueAsNumber: computed(\"valueAsNumber\"),\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value });\n    },\n    clearValue() {\n      send({ type: \"VALUE.CLEAR\" });\n    },\n    increment() {\n      send({ type: \"VALUE.INCREMENT\" });\n    },\n    decrement() {\n      send({ type: \"VALUE.DECREMENT\" });\n    },\n    setToMax() {\n      send({ type: \"VALUE.SET\", value: prop(\"max\") });\n    },\n    setToMin() {\n      send({ type: \"VALUE.SET\", value: prop(\"min\") });\n    },\n    focus() {\n      getInputEl(scope)?.focus();\n    },\n    getRootProps() {\n      return normalize.element({\n        id: getRootId(scope),\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        \"data-focus\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(focused),\n        \"data-invalid\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(invalid)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        \"data-focus\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(focused),\n        \"data-invalid\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(invalid),\n        id: getLabelId(scope),\n        htmlFor: getInputId(scope)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: prop(\"dir\"),\n        role: \"group\",\n        \"aria-disabled\": disabled,\n        \"data-focus\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(focused),\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        \"data-invalid\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(invalid),\n        \"aria-invalid\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.ariaAttr)(invalid)\n      });\n    },\n    getValueTextProps() {\n      return normalize.element({\n        ...parts.valueText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        \"data-invalid\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(invalid),\n        \"data-focus\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(focused)\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: prop(\"dir\"),\n        name: prop(\"name\"),\n        form: prop(\"form\"),\n        id: getInputId(scope),\n        role: \"spinbutton\",\n        defaultValue: computed(\"formattedValue\"),\n        pattern: prop(\"pattern\"),\n        inputMode: prop(\"inputMode\"),\n        \"aria-invalid\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.ariaAttr)(invalid),\n        \"data-invalid\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(invalid),\n        disabled,\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        readOnly,\n        required: prop(\"required\"),\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        spellCheck: \"false\",\n        type: \"text\",\n        \"aria-roledescription\": \"numberfield\",\n        \"aria-valuemin\": prop(\"min\"),\n        \"aria-valuemax\": prop(\"max\"),\n        \"aria-valuenow\": Number.isNaN(computed(\"valueAsNumber\")) ? void 0 : computed(\"valueAsNumber\"),\n        \"aria-valuetext\": computed(\"valueText\"),\n        onFocus() {\n          send({ type: \"INPUT.FOCUS\" });\n        },\n        onBlur() {\n          send({ type: \"INPUT.BLUR\" });\n        },\n        onInput(event) {\n          send({ type: \"INPUT.CHANGE\", target: event.currentTarget, hint: \"set\" });\n        },\n        onBeforeInput(event) {\n          try {\n            const { selectionStart, selectionEnd, value } = event.currentTarget;\n            const nextValue = value.slice(0, selectionStart) + (event.data ?? \"\") + value.slice(selectionEnd);\n            const isValid = computed(\"parser\").isValidPartialNumber(nextValue);\n            if (!isValid) {\n              event.preventDefault();\n            }\n          } catch {\n          }\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (readOnly) return;\n          if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.isComposingEvent)(event)) return;\n          const step = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getEventStep)(event) * prop(\"step\");\n          const keyMap = {\n            ArrowUp() {\n              send({ type: \"INPUT.ARROW_UP\", step });\n              event.preventDefault();\n            },\n            ArrowDown() {\n              send({ type: \"INPUT.ARROW_DOWN\", step });\n              event.preventDefault();\n            },\n            Home() {\n              if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.isModifierKey)(event)) return;\n              send({ type: \"INPUT.HOME\" });\n              event.preventDefault();\n            },\n            End() {\n              if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.isModifierKey)(event)) return;\n              send({ type: \"INPUT.END\" });\n              event.preventDefault();\n            },\n            Enter() {\n              send({ type: \"INPUT.ENTER\" });\n            }\n          };\n          const exec = keyMap[event.key];\n          exec?.(event);\n        }\n      });\n    },\n    getDecrementTriggerProps() {\n      return normalize.button({\n        ...parts.decrementTrigger.attrs,\n        dir: prop(\"dir\"),\n        id: getDecrementTriggerId(scope),\n        disabled: isDecrementDisabled,\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(isDecrementDisabled),\n        \"aria-label\": translations.decrementLabel,\n        type: \"button\",\n        tabIndex: -1,\n        \"aria-controls\": getInputId(scope),\n        onPointerDown(event) {\n          if (isDecrementDisabled || !(0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.isLeftClick)(event)) return;\n          send({ type: \"TRIGGER.PRESS_DOWN\", hint: \"decrement\", pointerType: event.pointerType });\n          if (event.pointerType === \"mouse\") {\n            event.preventDefault();\n          }\n          if (event.pointerType === \"touch\") {\n            event.currentTarget?.focus({ preventScroll: true });\n          }\n        },\n        onPointerUp(event) {\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"decrement\", pointerType: event.pointerType });\n        },\n        onPointerLeave() {\n          if (isDecrementDisabled) return;\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"decrement\" });\n        }\n      });\n    },\n    getIncrementTriggerProps() {\n      return normalize.button({\n        ...parts.incrementTrigger.attrs,\n        dir: prop(\"dir\"),\n        id: getIncrementTriggerId(scope),\n        disabled: isIncrementDisabled,\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(isIncrementDisabled),\n        \"aria-label\": translations.incrementLabel,\n        type: \"button\",\n        tabIndex: -1,\n        \"aria-controls\": getInputId(scope),\n        onPointerDown(event) {\n          if (isIncrementDisabled || !(0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.isLeftClick)(event)) return;\n          send({ type: \"TRIGGER.PRESS_DOWN\", hint: \"increment\", pointerType: event.pointerType });\n          if (event.pointerType === \"mouse\") {\n            event.preventDefault();\n          }\n          if (event.pointerType === \"touch\") {\n            event.currentTarget?.focus({ preventScroll: true });\n          }\n        },\n        onPointerUp(event) {\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"increment\", pointerType: event.pointerType });\n        },\n        onPointerLeave(event) {\n          send({ type: \"TRIGGER.PRESS_UP\", hint: \"increment\", pointerType: event.pointerType });\n        }\n      });\n    },\n    getScrubberProps() {\n      return normalize.element({\n        ...parts.scrubber.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(disabled),\n        id: getScrubberId(scope),\n        role: \"presentation\",\n        onMouseDown(event) {\n          if (disabled) return;\n          const point = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getEventPoint)(event);\n          const win = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getWindow)(event.currentTarget);\n          const dpr = win.devicePixelRatio;\n          point.x = point.x - (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.roundToDpr)(7.5, dpr);\n          point.y = point.y - (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.roundToDpr)(7.5, dpr);\n          send({ type: \"SCRUBBER.PRESS_DOWN\", point });\n          event.preventDefault();\n        },\n        style: {\n          cursor: disabled ? void 0 : \"ew-resize\"\n        }\n      });\n    }\n  };\n}\n\n// src/cursor.ts\nfunction recordCursor(inputEl) {\n  if (!inputEl || inputEl.ownerDocument.activeElement !== inputEl) return;\n  try {\n    const { selectionStart: start, selectionEnd: end, value } = inputEl;\n    const beforeTxt = value.substring(0, start);\n    const afterTxt = value.substring(end);\n    return {\n      start,\n      end,\n      value,\n      beforeTxt,\n      afterTxt\n    };\n  } catch {\n  }\n}\nfunction restoreCursor(inputEl, selection) {\n  if (!inputEl || inputEl.ownerDocument.activeElement !== inputEl) return;\n  if (!selection) {\n    inputEl.setSelectionRange(inputEl.value.length, inputEl.value.length);\n    return;\n  }\n  try {\n    const { value } = inputEl;\n    const { beforeTxt = \"\", afterTxt = \"\", start } = selection;\n    let startPos = value.length;\n    if (value.endsWith(afterTxt)) {\n      startPos = value.length - afterTxt.length;\n    } else if (value.startsWith(beforeTxt)) {\n      startPos = beforeTxt.length;\n    } else if (start != null) {\n      const beforeLastChar = beforeTxt[start - 1];\n      const newIndex = value.indexOf(beforeLastChar, start - 1);\n      if (newIndex !== -1) {\n        startPos = newIndex + 1;\n      }\n    }\n    inputEl.setSelectionRange(startPos, startPos);\n  } catch {\n  }\n}\nvar createFormatter = (locale, options = {}) => {\n  return new Intl.NumberFormat(locale, options);\n};\nvar createParser = (locale, options = {}) => {\n  return new _internationalized_number__WEBPACK_IMPORTED_MODULE_3__.NumberParser(locale, options);\n};\nvar parseValue = (value, params) => {\n  const { prop, computed } = params;\n  if (!prop(\"formatOptions\")) return parseFloat(value);\n  return computed(\"parser\").parse(String(value));\n};\nvar formatValue = (value, params) => {\n  const { prop, computed } = params;\n  if (Number.isNaN(value)) return \"\";\n  if (!prop(\"formatOptions\")) return value.toString();\n  return computed(\"formatter\").format(value);\n};\nvar getDefaultStep = (step, formatOptions) => {\n  let defaultStep = step !== void 0 && !Number.isNaN(step) ? step : 1;\n  if (formatOptions?.style === \"percent\" && (step === void 0 || Number.isNaN(step))) {\n    defaultStep = 0.01;\n  }\n  return defaultStep;\n};\n\n// src/number-input.machine.ts\nvar { choose, guards, createMachine } = (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_4__.setup)();\nvar { not, and } = guards;\nvar machine = createMachine({\n  props({ props: props2 }) {\n    const step = getDefaultStep(props2.step, props2.formatOptions);\n    return {\n      dir: \"ltr\",\n      locale: \"en-US\",\n      focusInputOnChange: true,\n      clampValueOnBlur: !props2.allowOverflow,\n      allowOverflow: false,\n      inputMode: \"decimal\",\n      pattern: \"[0-9]*(.[0-9]+)?\",\n      defaultValue: \"\",\n      step,\n      min: Number.MIN_SAFE_INTEGER,\n      max: Number.MAX_SAFE_INTEGER,\n      spinOnPress: true,\n      ...props2,\n      translations: {\n        incrementLabel: \"increment value\",\n        decrementLabel: \"decrease value\",\n        ...props2.translations\n      }\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable, getComputed }) {\n    return {\n      value: bindable(() => ({\n        defaultValue: prop(\"defaultValue\"),\n        value: prop(\"value\"),\n        onChange(value) {\n          const computed = getComputed();\n          const valueAsNumber = parseValue(value, { computed, prop });\n          prop(\"onValueChange\")?.({ value, valueAsNumber });\n        }\n      })),\n      hint: bindable(() => ({ defaultValue: null })),\n      scrubberCursorPoint: bindable(() => ({\n        defaultValue: null,\n        hash(value) {\n          return value ? `x:${value.x}, y:${value.y}` : \"\";\n        }\n      })),\n      fieldsetDisabled: bindable(() => ({ defaultValue: false }))\n    };\n  },\n  computed: {\n    isRtl: ({ prop }) => prop(\"dir\") === \"rtl\",\n    valueAsNumber: ({ context, computed, prop }) => parseValue(context.get(\"value\"), { computed, prop }),\n    formattedValue: ({ computed, prop }) => formatValue(computed(\"valueAsNumber\"), { computed, prop }),\n    isAtMin: ({ computed, prop }) => (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.isValueAtMin)(computed(\"valueAsNumber\"), prop(\"min\")),\n    isAtMax: ({ computed, prop }) => (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.isValueAtMax)(computed(\"valueAsNumber\"), prop(\"max\")),\n    isOutOfRange: ({ computed, prop }) => !(0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.isValueWithinRange)(computed(\"valueAsNumber\"), prop(\"min\"), prop(\"max\")),\n    isValueEmpty: ({ context }) => context.get(\"value\") === \"\",\n    isDisabled: ({ prop, context }) => !!prop(\"disabled\") || context.get(\"fieldsetDisabled\"),\n    canIncrement: ({ prop, computed }) => prop(\"allowOverflow\") || !computed(\"isAtMax\"),\n    canDecrement: ({ prop, computed }) => prop(\"allowOverflow\") || !computed(\"isAtMin\"),\n    valueText: ({ prop, context }) => prop(\"translations\").valueText?.(context.get(\"value\")),\n    formatter: (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_4__.memo)(\n      ({ prop }) => [prop(\"locale\"), prop(\"formatOptions\")],\n      (locale, formatOptions) => createFormatter(locale, formatOptions)\n    ),\n    parser: (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_4__.memo)(\n      ({ prop }) => [prop(\"locale\"), prop(\"formatOptions\")],\n      (locale, formatOptions) => createParser(locale, formatOptions)\n    )\n  },\n  watch({ track, action, context, computed, prop }) {\n    track([() => context.get(\"value\"), () => prop(\"locale\")], () => {\n      action([\"syncInputElement\"]);\n    });\n    track([() => computed(\"isOutOfRange\")], () => {\n      action([\"invokeOnInvalid\"]);\n    });\n    track([() => context.hash(\"scrubberCursorPoint\")], () => {\n      action([\"setVirtualCursorPosition\"]);\n    });\n  },\n  effects: [\"trackFormControl\"],\n  on: {\n    \"VALUE.SET\": {\n      actions: [\"setRawValue\"]\n    },\n    \"VALUE.CLEAR\": {\n      actions: [\"clearValue\"]\n    },\n    \"VALUE.INCREMENT\": {\n      actions: [\"increment\"]\n    },\n    \"VALUE.DECREMENT\": {\n      actions: [\"decrement\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        \"TRIGGER.PRESS_DOWN\": [\n          { guard: \"isTouchPointer\", target: \"before:spin\", actions: [\"setHint\"] },\n          {\n            target: \"before:spin\",\n            actions: [\"focusInput\", \"invokeOnFocus\", \"setHint\"]\n          }\n        ],\n        \"SCRUBBER.PRESS_DOWN\": {\n          target: \"scrubbing\",\n          actions: [\"focusInput\", \"invokeOnFocus\", \"setHint\", \"setCursorPoint\"]\n        },\n        \"INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"focusInput\", \"invokeOnFocus\"]\n        }\n      }\n    },\n    focused: {\n      tags: [\"focus\"],\n      effects: [\"attachWheelListener\"],\n      on: {\n        \"TRIGGER.PRESS_DOWN\": [\n          { guard: \"isTouchPointer\", target: \"before:spin\", actions: [\"setHint\"] },\n          { target: \"before:spin\", actions: [\"focusInput\", \"setHint\"] }\n        ],\n        \"SCRUBBER.PRESS_DOWN\": {\n          target: \"scrubbing\",\n          actions: [\"focusInput\", \"setHint\", \"setCursorPoint\"]\n        },\n        \"INPUT.ARROW_UP\": {\n          actions: [\"increment\"]\n        },\n        \"INPUT.ARROW_DOWN\": {\n          actions: [\"decrement\"]\n        },\n        \"INPUT.HOME\": {\n          actions: [\"decrementToMin\"]\n        },\n        \"INPUT.END\": {\n          actions: [\"incrementToMax\"]\n        },\n        \"INPUT.CHANGE\": {\n          actions: [\"setValue\", \"setHint\"]\n        },\n        \"INPUT.BLUR\": [\n          {\n            guard: and(\"clampValueOnBlur\", not(\"isInRange\")),\n            target: \"idle\",\n            actions: [\"setClampedValue\", \"clearHint\", \"invokeOnBlur\"]\n          },\n          {\n            guard: not(\"isInRange\"),\n            target: \"idle\",\n            actions: [\"setFormattedValue\", \"clearHint\", \"invokeOnBlur\", \"invokeOnInvalid\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"setFormattedValue\", \"clearHint\", \"invokeOnBlur\"]\n          }\n        ],\n        \"INPUT.ENTER\": {\n          actions: [\"setFormattedValue\", \"clearHint\", \"invokeOnBlur\"]\n        }\n      }\n    },\n    \"before:spin\": {\n      tags: [\"focus\"],\n      effects: [\"trackButtonDisabled\", \"waitForChangeDelay\"],\n      entry: choose([\n        { guard: \"isIncrementHint\", actions: [\"increment\"] },\n        { guard: \"isDecrementHint\", actions: [\"decrement\"] }\n      ]),\n      on: {\n        CHANGE_DELAY: {\n          target: \"spinning\",\n          guard: and(\"isInRange\", \"spinOnPress\")\n        },\n        \"TRIGGER.PRESS_UP\": [\n          { guard: \"isTouchPointer\", target: \"focused\", actions: [\"clearHint\"] },\n          { target: \"focused\", actions: [\"focusInput\", \"clearHint\"] }\n        ]\n      }\n    },\n    spinning: {\n      tags: [\"focus\"],\n      effects: [\"trackButtonDisabled\", \"spinValue\"],\n      on: {\n        SPIN: [\n          {\n            guard: \"isIncrementHint\",\n            actions: [\"increment\"]\n          },\n          {\n            guard: \"isDecrementHint\",\n            actions: [\"decrement\"]\n          }\n        ],\n        \"TRIGGER.PRESS_UP\": {\n          target: \"focused\",\n          actions: [\"focusInput\", \"clearHint\"]\n        }\n      }\n    },\n    scrubbing: {\n      tags: [\"focus\"],\n      effects: [\"activatePointerLock\", \"trackMousemove\", \"setupVirtualCursor\", \"preventTextSelection\"],\n      on: {\n        \"SCRUBBER.POINTER_UP\": {\n          target: \"focused\",\n          actions: [\"focusInput\", \"clearCursorPoint\"]\n        },\n        \"SCRUBBER.POINTER_MOVE\": [\n          {\n            guard: \"isIncrementHint\",\n            actions: [\"increment\", \"setCursorPoint\"]\n          },\n          {\n            guard: \"isDecrementHint\",\n            actions: [\"decrement\", \"setCursorPoint\"]\n          }\n        ]\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      clampValueOnBlur: ({ prop }) => prop(\"clampValueOnBlur\"),\n      spinOnPress: ({ prop }) => !!prop(\"spinOnPress\"),\n      isInRange: ({ computed }) => !computed(\"isOutOfRange\"),\n      isDecrementHint: ({ context, event }) => (event.hint ?? context.get(\"hint\")) === \"decrement\",\n      isIncrementHint: ({ context, event }) => (event.hint ?? context.get(\"hint\")) === \"increment\",\n      isTouchPointer: ({ event }) => event.pointerType === \"touch\"\n    },\n    effects: {\n      waitForChangeDelay({ send }) {\n        const id = setTimeout(() => {\n          send({ type: \"CHANGE_DELAY\" });\n        }, 300);\n        return () => clearTimeout(id);\n      },\n      spinValue({ send }) {\n        const id = setInterval(() => {\n          send({ type: \"SPIN\" });\n        }, 50);\n        return () => clearInterval(id);\n      },\n      trackFormControl({ context, scope }) {\n        const inputEl = getInputEl(scope);\n        return (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.trackFormControl)(inputEl, {\n          onFieldsetDisabledChange(disabled) {\n            context.set(\"fieldsetDisabled\", disabled);\n          },\n          onFormReset() {\n            context.set(\"value\", context.initial(\"value\"));\n          }\n        });\n      },\n      setupVirtualCursor({ context, scope }) {\n        const point = context.get(\"scrubberCursorPoint\");\n        return setupVirtualCursor(scope, point);\n      },\n      preventTextSelection({ scope }) {\n        return preventTextSelection(scope);\n      },\n      trackButtonDisabled({ context, scope, send }) {\n        const hint = context.get(\"hint\");\n        const btn = getPressedTriggerEl(scope, hint);\n        return (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.observeAttributes)(btn, {\n          attributes: [\"disabled\"],\n          callback() {\n            send({ type: \"TRIGGER.PRESS_UP\", src: \"attr\" });\n          }\n        });\n      },\n      attachWheelListener({ scope, send, prop }) {\n        const inputEl = getInputEl(scope);\n        if (!inputEl || !scope.isActiveElement(inputEl) || !prop(\"allowMouseWheel\")) return;\n        function onWheel(event) {\n          event.preventDefault();\n          const dir = Math.sign(event.deltaY) * -1;\n          if (dir === 1) {\n            send({ type: \"VALUE.INCREMENT\" });\n          } else if (dir === -1) {\n            send({ type: \"VALUE.DECREMENT\" });\n          }\n        }\n        return (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(inputEl, \"wheel\", onWheel, { passive: false });\n      },\n      activatePointerLock({ scope }) {\n        if ((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.isSafari)()) return;\n        return (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.requestPointerLock)(scope.getDoc());\n      },\n      trackMousemove({ scope, send, context, computed }) {\n        const doc = scope.getDoc();\n        function onMousemove(event) {\n          const point = context.get(\"scrubberCursorPoint\");\n          const isRtl = computed(\"isRtl\");\n          const value = getMousemoveValue(scope, { point, isRtl, event });\n          if (!value.hint) return;\n          send({\n            type: \"SCRUBBER.POINTER_MOVE\",\n            hint: value.hint,\n            point: value.point\n          });\n        }\n        function onMouseup() {\n          send({ type: \"SCRUBBER.POINTER_UP\" });\n        }\n        return (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.callAll)((0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(doc, \"mousemove\", onMousemove, false), (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(doc, \"mouseup\", onMouseup, false));\n      }\n    },\n    actions: {\n      focusInput({ scope, prop }) {\n        if (!prop(\"focusInputOnChange\")) return;\n        const inputEl = getInputEl(scope);\n        if (scope.isActiveElement(inputEl)) return;\n        (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.raf)(() => inputEl?.focus({ preventScroll: true }));\n      },\n      increment({ context, event, prop, computed }) {\n        let nextValue = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.incrementValue)(computed(\"valueAsNumber\"), event.step ?? prop(\"step\"));\n        if (!prop(\"allowOverflow\")) nextValue = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.clampValue)(nextValue, prop(\"min\"), prop(\"max\"));\n        context.set(\"value\", formatValue(nextValue, { computed, prop }));\n      },\n      decrement({ context, event, prop, computed }) {\n        let nextValue = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.decrementValue)(computed(\"valueAsNumber\"), event.step ?? prop(\"step\"));\n        if (!prop(\"allowOverflow\")) nextValue = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.clampValue)(nextValue, prop(\"min\"), prop(\"max\"));\n        context.set(\"value\", formatValue(nextValue, { computed, prop }));\n      },\n      setClampedValue({ context, prop, computed }) {\n        const nextValue = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.clampValue)(computed(\"valueAsNumber\"), prop(\"min\"), prop(\"max\"));\n        context.set(\"value\", formatValue(nextValue, { computed, prop }));\n      },\n      setRawValue({ context, event, prop, computed }) {\n        let nextValue = parseValue(event.value, { computed, prop });\n        if (!prop(\"allowOverflow\")) nextValue = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.clampValue)(nextValue, prop(\"min\"), prop(\"max\"));\n        context.set(\"value\", formatValue(nextValue, { computed, prop }));\n      },\n      setValue({ context, event }) {\n        const value = event.target?.value ?? event.value;\n        context.set(\"value\", value);\n      },\n      clearValue({ context }) {\n        context.set(\"value\", \"\");\n      },\n      incrementToMax({ context, prop, computed }) {\n        const value = formatValue(prop(\"max\"), { computed, prop });\n        context.set(\"value\", value);\n      },\n      decrementToMin({ context, prop, computed }) {\n        const value = formatValue(prop(\"min\"), { computed, prop });\n        context.set(\"value\", value);\n      },\n      setHint({ context, event }) {\n        context.set(\"hint\", event.hint);\n      },\n      clearHint({ context }) {\n        context.set(\"hint\", null);\n      },\n      invokeOnFocus({ computed, prop }) {\n        prop(\"onFocusChange\")?.({\n          focused: true,\n          value: computed(\"formattedValue\"),\n          valueAsNumber: computed(\"valueAsNumber\")\n        });\n      },\n      invokeOnBlur({ computed, prop }) {\n        prop(\"onFocusChange\")?.({\n          focused: false,\n          value: computed(\"formattedValue\"),\n          valueAsNumber: computed(\"valueAsNumber\")\n        });\n      },\n      invokeOnInvalid({ computed, prop, event }) {\n        if (event.type === \"INPUT.CHANGE\") return;\n        const reason = computed(\"valueAsNumber\") > prop(\"max\") ? \"rangeOverflow\" : \"rangeUnderflow\";\n        prop(\"onValueInvalid\")?.({\n          reason,\n          value: computed(\"formattedValue\"),\n          valueAsNumber: computed(\"valueAsNumber\")\n        });\n      },\n      syncInputElement({ context, event, computed, scope }) {\n        const value = event.type.endsWith(\"CHANGE\") ? context.get(\"value\") : computed(\"formattedValue\");\n        const inputEl = getInputEl(scope);\n        const sel = recordCursor(inputEl);\n        (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.raf)(() => {\n          (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.setElementValue)(inputEl, value);\n          restoreCursor(inputEl, sel);\n        });\n      },\n      setFormattedValue({ context, computed }) {\n        context.set(\"value\", computed(\"formattedValue\"));\n      },\n      setCursorPoint({ context, event }) {\n        context.set(\"scrubberCursorPoint\", event.point);\n      },\n      clearCursorPoint({ context }) {\n        context.set(\"scrubberCursorPoint\", null);\n      },\n      setVirtualCursorPosition({ context, scope }) {\n        const cursorEl = getCursorEl(scope);\n        const point = context.get(\"scrubberCursorPoint\");\n        if (!cursorEl || !point) return;\n        cursorEl.style.transform = `translate3d(${point.x}px, ${point.y}px, 0px)`;\n      }\n    }\n  }\n});\nvar props = (0,_zag_js_types__WEBPACK_IMPORTED_MODULE_5__.createProps)()([\n  \"allowMouseWheel\",\n  \"allowOverflow\",\n  \"clampValueOnBlur\",\n  \"dir\",\n  \"disabled\",\n  \"focusInputOnChange\",\n  \"form\",\n  \"formatOptions\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"inputMode\",\n  \"invalid\",\n  \"locale\",\n  \"max\",\n  \"min\",\n  \"name\",\n  \"onFocusChange\",\n  \"onValueChange\",\n  \"onValueInvalid\",\n  \"pattern\",\n  \"required\",\n  \"readOnly\",\n  \"spinOnPress\",\n  \"step\",\n  \"translations\",\n  \"value\",\n  \"defaultValue\"\n]);\nvar splitProps = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.createSplitProps)(props);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@zag-js+number-input@1.8.2/node_modules/@zag-js/number-input/dist/index.mjs\n");

/***/ })

};
;